def generate_polygon_and_decomposition(polygon_id=0):
	"""
	Hard coded polygons and decompositions
	"""

	if polygon_id == 0:
		# A rectangle
		P = [[(0,0),(10,0),(10,1),(0,1)],[]]
		q = [(0,0),(10,0),(10,1),(0,1)]

		decomposition = [[[(0,0),(10,0), (10.0,0.5)],[]], [[(0,0),(10.0,0.5),(10.0,1.0),(5.0,0.5)],[]], [[(5.0,0.5),(10.0,1.0),(0,1)],[]], [[(0,0),(5.0,0.5),(0,1)],[]]]


	elif polygon_id == 1:
		# A octagon
		P = [[(1,0),(2,0),(3,1),(3,2),(2,3),(1,3),(0,2),(0,1)],[]]
		q = [(1,-1),(2,-1),(3,3),(0,3)]

		decomposition = [[[(0.8333333333333334,0.16666666666666666),(0.9285714285714286,1.7857142857142854),(1,3),(0,2),(0,1)],[]], [[(0.9285714285714286,1.7857142857142854),(1.6818181818181817,1.8636363636363633),(3,2),(2,3),(1,3)],[]], [[(1.6818181818181817,1.8636363636363633),(0.9285714285714286,1.7857142857142854),(0.8333333333333334, 0.16666666666666666),(1,0),(2,0)], []], [[(1.6818181818181817, 1.8636363636363633), (2, 0), (3, 1), (3, 2)], []]]

	elif polygon_id == 2:
		# A complex shape without holes
		P = [[(0.0, 0.0),(4.0, 0.0),(4.0, 4.0),(6.0, 4.0),(6.0, 0.0),(10.0, 0.0),(10.0, 6.0),(8.0, 7.0),(7.5, 8.0),(10.0, 7.5),(10.0, 10.0),(0.0, 10.0),(0.0, 5.0),(5.0, 6.0),(5.0, 5.0),(0.0, 4.0)],[]]
		q = []

		decomposition = []

	elif polygon_id == 3:		
		# A more complex shape with one hole
		P = [[(0.0,0.0),(6.0,0.0),(6.0,5.0),(4.0,5.0),(4.0,3.0),(5.0,3.0),(5.0,2.0),(3.0,2.0),(3.0,6.0),(7.0,6.0),(7.0,0.0),(10.0,0.0),(10.0,10.0),(0.0,10.0)],[[(4.0,7.0),(3.5,8.0),(4.5,9.0),(6.0,8.0)]]]
		q = []

		decomposition = []
	
	return P, q, decomposition